<?php

namespace App\Http\Controllers\{{bundle}}\Admin;

use App\Http\Controllers\{{bundle}}\Form\{{model}}Form;
use App\Http\Controllers\{{bundle}}\Form\{{model}}SearchForm;
use App\Http\Controllers\Controller;
use App\Http\Controllers\{{bundle}}\Model\{{model}};
use Illuminate\Support\Facades\Input;
use App\Http\Requests;
use Kris\LaravelFormBuilder\FormBuilderTrait;

class DummyClass extends Controller
{

    use FormBuilderTrait;

    /**
     * index function
     *
     * return all entity
     */
    public function index()
    {
        $field = Input::get('field');
        $type= Input::get('type');
        $search = Input::get('search');
        $entity = {{model}}::
            //with()
            whereRaw($this->where)
            ->orderBy($field ? $field : 'id' , $type ? $type : 'DESC')
            ->paginate(10);
        $this->setContent($entity);
    }

    /**
     * create search form
     */
    public function searchForm()
    {
        $form = $this->form({{model}}SearchForm::class, [
            'method' => 'POST',
            'url' => getCurrentURL('controller').'/index',
            'novalidate' => 'novalidate',
        ]);
        $this->layout = view(lcfirst(config('app.bundle')) . '.' . lcfirst(config('app.controller')) . '.' . lcfirst(config('app.prefix')) . '.search', compact('form'));
        die($this->layout);
    }

    /**
     * create function
     *
     */
    public function create()
    {
        $form = $this->form({{model}}Form::class, [
                'method' => 'POST',
                'novalidate' => 'novalidate',
                'url' => getCurrentURL('controller').'/store',
         ]);
        return view(lcfirst(config('app.bundle')) . '.' . lcfirst(config('app.controller')) . '.' . lcfirst(config('app.prefix')) . '.edit', compact('form'));
    }

    /**
     * @return $this|\Illuminate\Http\RedirectResponse
     */
    public function store($id = null)
    {
        $frm = Input::all();
        $form = $this->form({{model}}Form::class);
        if (!$form->isValid()) {
            return redirect()->back()->withErrors($form->getErrors())->withInput();
        }
        {{model}}::store($frm, $id);
        return redirect()->back()->with('alert-success', trans('public.successfully'));
    }

    /**
     * @param $id
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function edit($id)
    {
        $entity = {{model}}::findOrFail($id);
        $form = $this->form({{model}}Form::class, [
            'model' => $entity,
            'method' => 'POST',
            'novalidate' => 'novalidate',
            'url' => getCurrentURL('controller').'/store/' . $id,
        ]);
        return view(lcfirst(config('app.bundle')) . '.' . lcfirst(config('app.controller')) . '.' . lcfirst(config('app.prefix')) . '.edit', compact('form'));
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return Response
     */
    public function show($id)
    {
        $entity = {{model}}::findOrNew($id);
        $this->setContent($entity, 'show');

    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return Response
     */
    public function destroy($id)
    {
        {{model}}::destroy($id);
    }

    /**
    * @param $id
    * @param $field
    */
    public function changeEnum($id)
    {
        $enum = Input::get('enum') == 1 ? 0 : 1 ;
        $field = Input::get('field');
        $frm = [$field => $enum];
        $id = {{model}}::store($frm, $id);
        die($id);
    }
}
